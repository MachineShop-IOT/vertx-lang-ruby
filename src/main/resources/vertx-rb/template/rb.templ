@code{

  /*
   * Returns the Ruby class qualified name for a given Vert.x Api interface
   * (for instance io.vertx.core.Vertx -> Vertx::Vertx), the generated name uses the module name the
   * Api interface belongs to.
   * @param type the type
   */
  def genRubyClassFqn(type) {
    return "::" + type.module.getName(CASE_CAMEL) + "::" + type.simpleName;
  }

  def genRubyDocType(type) {

    var kind = type.kind;
    if (kind == CLASS_OBJECT) {
      return "Object";
    } else if (kind == CLASS_JSON_OBJECT) {
      return "Hash{String => Object}";
    } else if (kind == CLASS_JSON_ARRAY) {
      return "Array<String,Object>";
    } else if (kind == CLASS_HANDLER) {
      return "Proc";
    } else if (kind.collection) {
      if (kind == CLASS_LIST) {
        return "Array<" + genRubyDocType(type.args[0]) + ">";
      } else if (kind == CLASS_SET) {
        return "Set<" + genRubyDocType(type.args[0]) + ">";
      } else if (kind == CLASS_MAP) {
        return "Hash{" + genRubyDocType(type.args[0]) + " => " + genRubyDocType(type.args[1]) + "}";
      }
    } else if (kind == CLASS_DATA_OBJECT) {
      return "Hash"; /* can we do something better ? */
    } else if (kind == CLASS_ENUM) {
      var buffer = "";
      boolean index = 0;
      for (value : type.values) {
        if (index > 0) {
          buffer += ",";
        }
        buffer += ":" + value;
        index = index + 1;
      }
      return buffer;
    } else if (kind.basic) {
      if (kind == CLASS_STRING) {
        return "String";
      } else {
        var typeName = type.name;
        if (typeName == "byte" || typeName == "java.lang.Byte" ||
            typeName == "short" || typeName == "java.lang.Short" ||
            typeName == "int" || typeName == "java.lang.Integer" ||
            typeName == "char" || typeName == "java.lang.Character" ||
            typeName == "long" || typeName == "java.lang.Long") {
          return "Fixnum";
        }
        if (typeName == "float" || typeName == "java.lang.Float" ||
            typeName == "double" || typeName == "java.lang.Double") {
          return "Float";
        }
        if (typeName == "boolean" || typeName == "java.lang.Boolean") {
          return "true,false";
        }
      }
    } else if (kind == CLASS_API) {
      return genRubyClassFqn(type.raw);
    }
    System.out.println("Untranslated type " + type + " with kind " + kind);
    return "Nil";
  }

  def renderLinkToHtml(link) {
    var rawType = link.targetType.raw;
    if (rawType.module != null) {
      var label = link.label.trim();
      if (label.length() > 0) {
        label = " " + label
      }
      var elt = link.targetElement;
      var rubyType = genRubyClassFqn(rawType);
      var kind = elt.getKind().name();
      if (kind == "CLASS" || kind == "INTERFACE") {
        return "{" + rubyType + label + "}";
      } else if (kind == "METHOD") {
        return "{" + rubyType + "#" + CASE_SNAKE.format(CASE_CAMEL.parse(elt.getSimpleName().toString())) + label + "}";
      } else {
        System.out.println("Unhandled kind " + kind);
      }
    }
  }

  def renderDocToHtml(margin, doc) {
    var need = true;
    var html = new StringBuilder();
    for (token : doc.tokens) {
      if (need) {
        html.append(margin);
        need = false;
      }
      if (token.lineBreak) {
        html.append("\n");
        need = true;
      } else {
        if (token.text) {
          html.append(token.value);
        } else {
          var tag = token.tag;
          if (tag instanceof io.vertx.codegen.doc.Tag$Link) {
            var link = renderLinkToHtml(tag);
            html.append(link);
          } else if (tag.name == "code") {
            html.append("<code>").append(tag.value.trim()).append("</code>");
          }
        }
      }
    }
    if (!need) {
      html.append("\n");
    }
    return html.toString();
  }

  /*
   * Returns the Ruby file name include for a given Vert.x Api interface
   * (for instance io.vertx.core.Vertx -> vertx/vertx), the generated name uses the module name
   * the Api interface belongs to.
   * @param type the type
   */
  def genRubyClassInclude(type) {
    return type.module.getName(CASE_KEBAB) + "/" + type.getSimpleName(CASE_SNAKE);
  }
  /*
   * Returns the Ruby class qualified name for the Java type suitable for creating instances of the type
   * (for instance java.util.HashMap -> Java::JavaUtil::HashMap), the generated name uses the package name
   * of the type.
   * @param type the type
   */
  def genJavaClassFqn(type) {
    return "Java::" + CASE_CAMEL.format(CASE_QUALIFIED.parse(type.packageName)) + "::" + type.simpleName;
  }

  /* Ruby reserved words */
  var reservedWords = new java.util.HashSet();
  reservedWords.add("alias");
  reservedWords.add("and");
  reservedWords.add("BEGIN");
  reservedWords.add("begin");
  reservedWords.add("def");
  reservedWords.add("elsif");
  reservedWords.add("END");
  reservedWords.add("end");
  reservedWords.add("ensure");
  reservedWords.add("in");
  reservedWords.add("module");
  reservedWords.add("next");
  reservedWords.add("nil");
  reservedWords.add("not");
  reservedWords.add("or");
  reservedWords.add("redo");
  reservedWords.add("rescue");
  reservedWords.add("retry");
  reservedWords.add("self");
  reservedWords.add("then");
  reservedWords.add("undef");
  reservedWords.add("unless");
  reservedWords.add("until");
  reservedWords.add("when");
  reservedWords.add("yield");

  /*
   * Generate a correct ruby name that does not clash with an identifier.
   */
  def genRubyName(name) {
    if (reservedWords.contains(name)) {
      return "_" + name
    } else {
      return name;
    }
  }

  /*
   * Returns the predicate for the specified type and expression that validates a Ruby object can be converted
   * to a specified Java object.
   * @param expr the expression that evaluates to the object to validate
   * @param type the type to validate
   */
  def genTypeCheckPredicate(expr, type) {
    var kind = type.kind;
    if (kind == CLASS_STRING) {
      return expr + ".class == String";
    } else if (kind == CLASS_ENUM) {
      return expr + ".class == Symbol";
    } else if (kind.basic) {
      var typeName = type.name;
      if (typeName == "byte" || typeName == "java.lang.Byte" ||
          typeName == "short" || typeName == "java.lang.Short" ||
          typeName == "int" || typeName == "java.lang.Integer" ||
          typeName == "char" || typeName == "java.lang.Character" ||
          typeName == "long" || typeName == "java.lang.Long") {
        return expr + ".class == Fixnum";
      }
      if (typeName == "float" || typeName == "java.lang.Float" ||
          typeName == "double" || typeName == "java.lang.Double") {
        return expr + ".class == Float";
      }
      if (typeName == "boolean" || typeName == "java.lang.Boolean") {
        return expr + ".class == TrueClass || " + expr + ".class == FalseClass";
      }
    } else if (kind == CLASS_OBJECT) {
      return expr + ".class == String  ||" + expr + ".class == Hash || " + expr + ".class == Array"
    } else if (kind == CLASS_API) {
      return expr + ".class.method_defined?(:j_del)";
    } else if (kind == CLASS_HANDLER) {
      return expr + ".class == Proc";
    } else if (kind == CLASS_DATA_OBJECT || kind == CLASS_JSON_OBJECT) {
      return expr + ".class == Hash";
    } else if (kind == CLASS_JSON_ARRAY) {
      return expr + ".class == Array";
    } else if (kind == CLASS_LIST) {
      return expr + ".class == Array";
    } else if (kind == CLASS_SET) {
      return expr + ".class == Set";
    } else if (kind == CLASS_MAP) {
      return expr + ".class == Hash";
    }
    return "false";
  }

  /*
   * Returns the method call for a given method.
   * @param method the called method
   * @param params the parameter names to use
   */
  def genMethodCall(method,params) {
    var s = "";
    var index = 1;
    if (method.params.size() > 0) {
      s = "";
      for (param : method.params) {
        if (s.length() > 0) {
          s += ",";
        }
        s += genConvParam(param.type, params[index - 1]);
        index += 1;
      }
      s = "(" + s + ")";
    }
    return (method.staticMethod ? genJavaClassFqn(type.raw) : "@j_del") + "." + method.getName() + s;
  }

  /*
   * Returns the Ruby expression that converts a Ruby object to a Java object given that
   * the expression is valid.
   * @param type the Java type to convert to
   * @param expr the expression that evaluates to the Ruby object
   */
  def genConvParam(type, expr) {
    var kind = type.kind;
    if (kind.basic) {
      if (type.name == "byte" || type.name == "java.lang.Byte") {
        return "::Vertx::Util::Utils.to_byte(" + expr + ")";
      } else if (type.name == "short" || type.name == "java.lang.Short") {
        return "::Vertx::Util::Utils.to_short(" + expr + ")";
      } else if (type.name == "integer" || type.name == "java.lang.Integer") {
        return "::Vertx::Util::Utils.to_integer(" + expr + ")";
      } else if (type.name == "float" || type.name == "java.lang.Float") {
        /* not tested */
        return "::Vertx::Util::Utils.to_float(" + expr + ")";
      } else if (type.name == "double" || type.name == "java.lang.Double") {
        /* not tested */
        return "::Vertx::Util::Utils.to_double(" + expr + ")";
      } else {
        return expr;
      }
    } else if (kind == CLASS_HANDLER) {
      var eventType = type.args[0];
      var eventKind = eventType.kind;
      if (eventKind.basic || eventKind == CLASS_DATA_OBJECT || eventKind.collection || eventKind == CLASS_API ||
          eventKind == CLASS_THROWABLE || eventKind == CLASS_OBJECT || eventKind.json) {
        return "(Proc.new { |event| " + expr + ".call(" + genConvReturn(eventType, "event") + ") })";
      } else if (eventKind == CLASS_VOID) {
        return expr;
      } else if (eventKind == CLASS_ASYNC_RESULT) {
        var resultType = eventType.args[0];
        var resultKind = resultType.kind;
        if (resultKind.basic || resultKind == CLASS_DATA_OBJECT || resultKind.collection || resultKind == CLASS_API ||
            resultKind == CLASS_OBJECT || resultKind.json) {
          return "(Proc.new { |ar| " + expr + ".call(ar.failed ? ar.cause : nil, ar.succeeded ? " + genConvReturn(resultType, "ar.result") + " : nil) })";
        } else if (resultKind == CLASS_VOID) {
          return "(Proc.new { |ar| " + expr + ".call(ar.failed ? ar.cause : nil) })";
        }
      }
    } else if (kind == CLASS_API) {
      return expr + ".j_del";
    } else if (kind == CLASS_OBJECT) {
      return "::Vertx::Util::Utils.to_object(" + expr + ")";
    } else if (kind == CLASS_DATA_OBJECT) {
      return genJavaClassFqn(type) + ".new(::Vertx::Util::Utils.to_json_object(" + expr + "))";
    } else if (kind == CLASS_JSON_OBJECT) {
      return "::Vertx::Util::Utils.to_json_object(" + expr + ")";
    } else if (kind == CLASS_JSON_ARRAY) {
      return "::Vertx::Util::Utils.to_json_array(" + expr + ")";
    } else if (kind == CLASS_ENUM) {
      return genJavaClassFqn(type) + ".valueOf(" + expr + ")";
    } else if (kind == CLASS_LIST) {
      var elementType = type.args[0];
      return expr + ".map { |element| " + genConvParam(elementType, "element") + " }";
    } else if (kind == CLASS_SET) {
      var elementType = type.args[0];
      return "Java::JavaUtil::LinkedHashSet.new(" + expr + ".map { |element| " + genConvParam(elementType, "element") + " })";
    } else if (kind == CLASS_MAP) {
      var valueType = type.args[1];
      return "Hash[" + expr + ".map { |k,v| [k," + genConvParam(valueType, "v") + "] }]";
    }
    return "nil";
  }

  /*
   * Returns the Ruby expression that converts a Java object to a Ruby object.
   * @param type the type of the Java object
   * @param expr the expression that evaluates to the Java object
   */
  def genConvReturn(type, expr) {
    if (type.name.equals("void")) {
      return expr;
    } else {
      var kind = type.kind;
      if (kind.basic || kind == CLASS_THROWABLE) {
        return expr;
      } else if (kind == CLASS_DATA_OBJECT) {
        return "JSON.parse(" + expr + ".toJson.encode)";
      } else if (kind == CLASS_LIST) {
        var elementType = type.args[0];
        return expr + ".to_a.map { |elt| " + genConvReturn(elementType, "elt") + " }";
      } else if (kind == CLASS_SET) {
        var elementType = type.args[0];
        return expr + ".to_set.map! { |elt| " + genConvReturn(elementType, "elt") + " }";
      } else if (kind == CLASS_MAP) {
        var valueType = type.args[1];
        var valueKind = valueType.kind;
        var toJava = "to_object";
        if (valueKind == CLASS_JSON_OBJECT) {
          toJava = "to_json_object";
        } else if (valueKind == CLASS_JSON_ARRAY) {
          toJava = "to_json_array";
        } else if (valueKind.basic) {
          if (valueKind == CLASS_STRING) {
            toJava = "to_string";
          } else if (valueType.name == 'java.lang.Long') {
            toJava = "to_long";
          } else if (valueType.name == 'java.lang.Integer') {
            toJava = "to_integer";
          } else if (valueType.name == 'java.lang.Short') {
            toJava = "to_short";
          } else if (valueType.name == 'java.lang.Byte') {
            toJava = "to_byte";
          } else if (valueType.name == 'java.lang.Character') {
            toJava = "to_character";
          } else if (valueType.name == 'java.lang.Boolean') {
            toJava = "to_boolean";
          } else if (valueType.name == 'java.lang.Float') {
            toJava = "to_float";
          } else if (valueType.name == 'java.lang.Double') {
            toJava = "to_double";
          }
        }
        return "Java::IoVertxLangJruby::Helper.adaptingMap(" + expr + ", Proc.new { |val| ::Vertx::Util::Utils.from_object(val) }, Proc.new { |val| ::Vertx::Util::Utils." + toJava + "(val) })";
      } else if (kind == CLASS_API) {
        return genRubyClassFqn(type.raw) + (type.raw.concrete ? "" : "Impl") + ".new(" + expr + ")";
      } else if (kind.json) {
        return expr + " != nil ? JSON.parse(" + expr + ".encode) : nil";
      } else if (kind == CLASS_OBJECT) {
        return "::Vertx::Util::Utils.from_object(" + expr + ")";
      } else if (kind == CLASS_ENUM) {
        return expr + ".name.intern";
      }
      return "nil";
    }
  }

  /*
   * Append an entry to a Trie structure. The Trie structure is created from the overloaded methods parameters
   * and is used to generate a method call.
   *
   * for example:
   * - Buffer buffer()
   * - Buffer buffer(int initialSizeHint)
   * - Buffer buffer(String string))
   * - Buffer buffer(String string, String enc)
   *
   * gives {int:{},String:{String)} that generates the Ruby code
   *
   * def self.buffer(param_1=nil,param_2=nil)
   *   if param_1.class == String
   *     if param_2.class == String
   *       return Vertx::Buffer.new(Java::IoVertxCoreBuffer::Buffer.buffer(param_1,param_2))
   *     end
   *     return Vertx::Buffer.new(Java::IoVertxCoreBuffer::Buffer.buffer(param_1))
   *   end
   *   if param_1.class == Fixnum
   *     return Vertx::Buffer.new(Java::IoVertxCoreBuffer::Buffer.buffer(param_1))
   *   end
   *   return Vertx::Buffer.new(Java::IoVertxCoreBuffer::Buffer.buffer)
   * end
   *
   * @param trie the trie as a Map<ParamInfo, Map<ParamInfo, Map<...>>>
   * @param entry the entry as an Iterator<ParamInfo>
   */
  def trieAppend(trie, params) {
    if (params.hasNext()) {
      var first = params.next();
      if (!trie.containsKey(first.type)) {
        trie.put(first.type, new java.util.HashMap());
      }
      return trieAppend(trie.get(first.type), params);
    } else {
      return trie;
    }
  }
  /*
   * Returns the trie kind:
   * 0 : empty
   * 1 : linear
   * 2 : multiarg
   * @param trie the trie
   */
  def trieKind(trie) {
    if (trie.isEmpty()) {
      return 0;
    } else if (trie.size() == 1) {
      var kind = trieKind(trie.get(trie.keySet().iterator().next()));
      if (kind == 2) {
        return 2;
      }
      return 1;
    } else {
      return 2;
    }
  }

  /*
   * Returns the trie height
   * @param trie the trie
   */
  def trieHeight(trie) {
    if (trie.isEmpty()) {
      return 0;
    } else {
      var max = 0;
      for (child : trie.values()) {
        var height = trieHeight(child) + 1;
        if (height > max) {
          max = height;
        }
      }
      return max;
    }
  }

  /*
   * Returns the code for indenting properly, given the actual _trie stack size.
   */
  def genIndent() {
    var builder = new java.lang.StringBuilder('  ');
    for (i:_trie.size()) {
      builder.append('  ');
    }
    return builder.toString();
  }
}

@comment{"Generate a method dispatch fragment."}
@comment{"@param method the method to generate the dispatch for"}
@comment{"@param indent the extra indent"}
@comment{"@param generic whether to use the method parameter names or the generic parameter names"}
@comment{"@param last true when this method is the last one in the call dispatch tree"}
@declare{'genMethodDispatchFragment'}
@if{method.fluent}
@{indent}@{genMethodCall(method,params)}\n
@{indent}@if{!last}return @end{}self\n
@else{}
	@if{method.cacheReturn}
		@code{cacheKey="@cached_" + method.getName(CASE_SNAKE)}
		@code{cacheDecl=cacheKey + " = "}
		@{indent}if @{cacheKey} != nil\n
		@{indent}  return @{cacheKey}\n
		@{indent}end\n
	@else{}
		@code{cacheDecl=""}
	@end{}
@{indent}@if{!last}return @end{}@{cacheDecl}@{genConvReturn(method.returnType, genMethodCall(method,params))}\n
@end{}
@end{}

@comment{"Generate the require"}
@foreach{referencedType : referencedTypes}
require '@{genRubyClassInclude(referencedType.raw)}'\n
@end{}
require 'vertx/util/utils.rb'\n

@declare{'initializer'}
    # @private\n
    # @param j_del [@{genRubyClassFqn(type.raw)}] the java delegate\n
    def initialize(j_del)\n
	@if{callSuper}
      super(j_del)\n
	@end{}
      @j_del = j_del\n
    end\n
    # @private\n
    # @return [@{genRubyClassFqn(type.raw)}] the underlying java delegate\n
    def j_del\n
      @j_del\n
    end\n
@end{}

# Generated from @{type.name}\n
module @{type.raw.module.getName(CASE_CAMEL)}\n

@if{concrete}
	@if{doc != null}
		@{renderDocToHtml("  # ", doc)}
	@end{}
  class @{type.raw.simpleName}@if{concreteSuperTypes.size() == 1} < @{genRubyClassFqn(concreteSuperTypes[0].raw)}@end{}\n
	@foreach{abstractSuperType:abstractSuperTypes}
    include @{genRubyClassFqn(abstractSuperType.raw)}\n
	@end{}
	@includeNamed{'initializer';callSuper=concreteSuperTypes.size() == 1}
@else{}
  module @{type.raw.simpleName}\n
	@foreach{superType:superTypes}
    include @{genRubyClassFqn(superType.raw)}\n
	@end{}
@end{}

	@foreach{methods:methodsByName.values()}

		@code{lastMethod=methods[methods.size()-1]}
		@code{methodName=methods[0].getName(CASE_SNAKE)}
		@code{methodDecl=(methods[0].staticMethod ? "self." : "") + methodName}
		@code{trie = new java.util.HashMap()}
		@code{methodMap = new java.util.IdentityHashMap()}
		@foreach{method:methods}
			@code{methodMap.put(trieAppend(trie, method.params.iterator()), method)}
		@end{}
		@code{kind = trieKind(trie)}

		@code{params=new java.util.ArrayList()}
		@foreach{index:trieHeight(trie)}
			@if{kind == 0 || kind == 1}
				@code{params.add(genRubyName(lastMethod.params[index].name))}
			@else{}
				@code{params.add("param_" + (index + 1))}
			@end{}
		@end{}

@comment{"Maintain the current trie in the recursive template genMethodDispatch"}
@code{_trie=new java.util.LinkedList()}

@comment{"Recursive template generating the full dispatch"}
@declare{'genMethodDispatch'}
	@code{_trie.addLast(trie)}
	@if{trie.size() > 0}
		@foreach{entry:trie.entrySet()}
			@{genIndent()}  if @{genTypeCheckPredicate(params.get(_trie.size() - 1), entry.key)}\n
			@code{trie=entry.value}
			@includeNamed{'genMethodDispatch'}
			@{genIndent()}  end\n
		@end{}
	@end{}
	@code{trie=_trie.removeLast()}
	@if{methodMap.containsKey(trie)}
		@includeNamed{"genMethodDispatchFragment";method=methodMap.get(trie);indent=("    " + genIndent());generic=(kind == 2);last=(_trie.size() == 0)}
	@else{}
		@code{arg=params.get(_trie.size())}
		@{genIndent()}    raise ArgumentError, "Invalid argument @{arg}=#{@{arg}} when calling @{methodName}(@foreach{param:params}@{param}@end{","})"\n
	@end{}
@end{}

@comment{""}
@declare{'methodParamsTags'}
	@foreach{param:methodParams}
    # @{indent}@param [@{genRubyDocType(param.type)}] @{genRubyName(param.name)}\n
	@end{}
@end{}

@if{lastMethod.doc != null}
	@{renderDocToHtml("    # ", lastMethod.doc)}
@end{}
@if{kind != 2}
	@includeNamed{'methodParamsTags';methodParams=lastMethod.params;indent=''}
@else{}
	@foreach{method:methods}
    # @overload @{method.name}(@foreach{param:method.params}@{param.name}@end{","})\n
		@includeNamed{'methodParamsTags';methodParams=method.params;indent='  '}
	@end{}
@end{}
@if{lastMethod.fluent}
    # return [self]\n
@else{lastMethod.returnType.simpleName == "void"}
    # return [void]\n
@else{}
    # @return [@{genRubyDocType(lastMethod.returnType)}]\n
@end{}
    def @{methodDecl}@if{params.size() > 0}(
			@code{index=0}@foreach{param:params}
			@code{handler=index==(params.size()-1) && lastMethod.params[index].type.kind == CLASS_HANDLER}
			@if{handler}&@end{}
			@{param}
			@if{index++ >= methods[0].params.size() && !handler}=nil@end{}
			@end{","})@end{}\n
			@includeNamed{'genMethodDispatch'}
    end\n

	@end{}

  end\n

@comment{"The mixin implementing the class for abstract interfaces"}
@if{!concrete}
  class @{type.raw.simpleName}Impl\n
    include @{type.raw.simpleName}\n
@includeNamed{'initializer';callSuper=false}
  end\n
@end{}

end\n